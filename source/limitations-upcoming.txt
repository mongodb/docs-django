.. _django-limitations:
.. _django-feature-compat:

========================================
Django and MongoDB Feature Compatibility
========================================

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: upcoming, odm, support

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page, you can find information about supported and unsupported
features in {+django-odm+}. You can also find features
currently planned for the General Availability (GA) and post-GA
releases. We will prioritize these upcoming features
based on user demand, and you can request support
for a feature by :ref:`creating a JIRA issue <django-issues-and-help>`.

.. important::

   Unsupported features that have a checkmark (``✓``) symbol in the
   ``General Availability Support`` column are planned for the GA
   release. However, support is not guaranteed.

MongoDB Features
----------------

This section indicates whether the {+django-odm+} supports various
MongoDB features and which features we plan to support in
the GA release.

Index Support
~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - MongoDB Feature
     - Public Preview Support
     - General Availability Support

   * - Atlas Search and Atlas Vector Search indexes
     - *Partially Supported*. You cannot use the Django
       Indexes API to create these indexes, but you can use
       the PyMongo Driver by :ref:`exposing your MongoClient <django-client-operations>`.
     - ✓

   * - Compound indexes
     - ✓
     - ✓

   * - Embedded document indexes
     - ✓
     - ✓

   * - Geospatial indexes
     - *Partially Supported*. You cannot use the Django
       Indexes API to create these indexes, but you can use
       the PyMongo Driver by :ref:`exposing your MongoClient <django-client-operations>`.
     - ✓

   * - Multikey indexes
     - ✓
     - ✓

   * - Partial indexes
     - ✓
     - ✓

   * - Single field indexes
     - ✓
     - ✓

   * - Unique indexes
     - ✓
     - ✓

   * - Updating ``EmbeddedModelFields`` indexes after model creation
     - *Unsupported*
     - ✓

Field Type Support
~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - MongoDB Field Type
     - Public Preview Support
     - General Availability Support

   * - ``Array``
     - *Partially Supported*. You can use the ``ArrayField`` field type with the
       following limitations:

       - ``ArrayField`` polymorphism is not supported.
       -  Nested ``EmbeddedModelField`` values within an ``ArrayField`` are not supported.

     - ✓

   * - ``Object``
     - *Partially Supported*. You can use the ``EmbeddedModelField`` field type with the
       following limitations:

       - ``EmbeddedModel`` schema changes do not register after creation.
       - Embedded documents cannot take Django foreign keys.
       - Arbitrary or untyped embedded model fields are not supported. You must
         derive all fields from a ``EmbeddedModel`` class.
       
     - *Partial Support Planned*. We plan to add support for registering 
       ``EmbeddedModel`` schema changes after creation.

{+django-odm+} currently supports all other MongoDB field types not included
in the preceding table. To view a full list of supported fields, see the :ref:`django-models-mongodb-fields`
section of the Create Models guide.

Query Support
~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - MongoDB Feature
     - Public Preview Support
     - General Availability Support

   * - Aggregation operations
     - *Partially Supported*. The {+django-odm+} does not include custom
       Django field lookups for the MongoDB aggregation framework, but you
       can use the :ref:`raw_aggregate() method <django-raw-queries-filter-group>`.
     - *Full Support Not Planned*. However, we plan to add support for MongoDB
       aggregation operators in a post-GA release.

   * - Atlas Search queries
     - *Partially Supported*. You cannot use the Django
       ``QuerySet`` API to run Atlas Search queries, but you can use
       the :ref:`raw_aggregate() method <django-raw-queries-search>`.
     - ✓

   * - Delete operations
     - ✓ Use ``delete()``.
     - ✓

   * - Geospatial queries
     - *Partially Supported*. You cannot use the Django
       ``QuerySet`` or ``GeoDjango`` API to run geospatial queries, but you can use
       the :ref:`raw_aggregate() method <django-raw-queries-geospatial>`.
     - ✓

   * - Insert operations
     - ✓ Use ``create()`` or ``save()``.
     - ✓

   * - Read operations
     - ✓ Use ``filter()`` or ``get()``.
     - ✓

   * - Update operations
     - ✓ Use ``update()``.
     - ✓

   * - Vector Search queries
     - *Partially Supported*. You cannot use the Django
       ``QuerySet`` API to run Vector Search queries, but you can use
       the :ref:`raw_aggregate() method <django-raw-queries-search>`.
     - ✓

Database and Collection Support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - MongoDB Feature
     - Public Preview Support
     - General Availability Support

   * - Asynchronous support
     - *Unsupported*.
     - ✓

   * - Collection interaction
     - ✓ Use Django models to represent MongoDB collections.
     - ✓

   * - Database interaction
     - ✓
     - ✓

   * - Transactions
     - *Unsupported*.
     - ✓

   * - Client-side Field Level Encryption and Queryable Encryption
     - *Unsupported*.
     - ✓

   * - Multiple models for one collection
     - *Unsupported*.
     - ✓

   * - GridFS
     - *Unsupported*.
     - *Unsupported*. However, we plan to add support for this feature
       in a post-GA release.

   * - Change Streams
     - *Unsupported*.
     - *Unsupported*. However, we plan to add support for this feature
       in a post-GA release.

   * - Schema validation
     - *Unsupported*.
     - *Unsupported*. However, we plan to add support for this feature
       in a post-GA release.

   * - Cached data storage
     - *Unsupported*.
     - ✓

Django Features
---------------

This section indicates whether the {+django-odm+} supports various
{+framework+} features and which features we plan to support in
the GA release.

Field Type Support
~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - {+framework+} Field Type
     - Public Preview Support
     - General Availability Support

   * - ``AutoField``
     - *Unsupported*. The ``BigAutoField`` and ``SmallAutoField`` types are also
       not supported. Instead, use ``ObjectIdField``.
     - *Unsupported*.

   * - ``BSONRegExp``
     - *Unsupported*.
     - *Unsupported*. However, we plan to support this field
       in a post-GA release.

   * - ``DateTimeField``
     - *Partially Supported*. You can use this field type with the
       following limitations:

       - Microsecond granularity for ``DateTimeField`` values is not supported.
       
     - *Full Support Not Planned*.

   * - ``DurationField``
     - *Partially Supported*. You can use this field type with the
       following limitations:

       - ``DurationField`` stores milliseconds rather than microseconds
       
     - *Full Support Not Planned*.

   * - ``ForeignKey``
     - *Partially Supported*. You can use this field type with the
       following limitations:

       - When possible, you should use an ``EmbeddedModelField`` instead of a
         ``ForeignKey`` field to avoid using ``$lookup`` operations. An
         ``EmbeddedModelField`` emulates a MongoDB embedded document and performs
         better than a ``ForeignKey`` field. To learn more about how to reduce
         ``$lookup`` operations, see the :atlas:`Reduce $lookup Operations
         </schema-suggestions/reduce-lookup-operations/>` guide in the Atlas
         documentation.
       - Performance of `CASCADE deletes <{+django-docs+}/ref/models/fields/#django.db.models.CASCADE>`__
         on a ``ForeignKey`` field is not as performant as using an
         ``EmbeddedModelField``.
       
     - *Full Support Not Planned*.

   * - ``GeneratedField``
     - *Unsupported*.
     - *Unsupported*.

   * - ``JSONField``
     - *Partially Supported*. You can use this field type with the
       following limitations:

       - {+django-odm+} cannot distinguish between a JSON and a SQL ``null`` value.
         Queries that use ``Value(None, JSONField())`` or the ``isnull`` lookup
         return both JSON and SQL ``null`` values.
       - Some queries with ``Q`` objects, such as ``Q(value__foo="bar")``, might
         not work as expected.
       - Filtering for ``None`` values incorrectly returns objects in which a field
         does not exist.

     - *Full Support Not Planned*. However, we plan to address the
       ``Q`` object and ``None`` key filtering limitations in a post-GA release.

{+django-odm+} currently supports all other {+framework+} field types not included in
the preceding table. To view a full list of supported fields, see the :ref:`django-models-django-fields`
section of the Create Models guide.

Query Support
~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - {+framework+} ``QuerySet`` Feature
     - Public Preview Support
     - General Availability Support

   * - ``aggregate()``
     - ✓
     - ✓

   * - ``all()``
     - ✓
     - ✓

   * - ``alias()``
     - ✓
     - ✓

   * - ``AND`` operator (``&``)
     - ✓
     - ✓

   * - ``annotate()``
     - ✓
     - ✓

   * - ``as_manager()``
     - ✓
     - ✓

   * - ``bulk_create()``
     - ✓
     - ✓

   * - ``bulk_update()``
     - *Unsupported*.
     - *Unsupported*.

   * - ``count()``
     - ✓
     - ✓

   * - ``contains()``
     - ✓
     - ✓

   * - ``create()``
     - ✓
     - ✓

   * - ``dates()``
     - *Unsupported*.
     - *Unsupported*.

   * - ``datetimes()``
     - *Unsupported*.
     - *Unsupported*.

   * - ``defer()``
     - ✓
     - ✓

   * - ``delete()``
     - *Partially Supported*. You cannot use this method to perform
       queries that span multiple collections.
     - *Full Support Not Planned*.

   * - ``difference()``
     - ✓
     - ✓

   * - ``distinct()``
     - *Unsupported*.
     - *Unsupported*.

   * - ``earliest()``
     - ✓
     - ✓

   * - ``exclude()``
     - ✓
     - ✓

   * - ``exists()``
     - ✓
     - ✓

   * - ``explain()``
     - ✓
     - ✓

   * - ``extra()``
     - *Unsupported*.
     - *Unsupported*.

   * - ``filter()``
     - ✓
     - ✓

   * - ``first()``
     - ✓
     - ✓

   * - ``get()``
     - ✓
     - ✓

   * - ``get_or_create()``
     - ✓
     - ✓

   * - ``in_bulk()``
     - ✓
     - ✓

   * - ``intersection()``
     - ✓
     - ✓

   * - ``last()``
     - ✓
     - ✓

   * - ``latest()``
     - ✓
     - ✓

   * - ``none()``
     - ✓
     - ✓

   * - ``only()``
     - ✓
     - ✓

   * - ``OR`` operator (``|``)
     - ✓
     - ✓

   * - ``order_by()``
     - ✓
     - ✓

   * - ``prefetch_related()``
     - *Unsupported*.
     - *Unsupported*.

   * - ``raw()``
     - *Unsupported*. However, you can use the ``raw_aggregate()`` method
       to run queries that use MongoDB's aggregation pipeline syntax.
     - *Unsupported*.

   * - ``reverse()``
     - ✓
     - ✓

   * - ``union()``
     - ✓
     - ✓

   * - ``update()``
     - *Partially Supported*. You cannot use this method to perform
       queries that span multiple collections.
     - *Full Support Not Planned*.

   * - ``update_or_create()``
     - ✓
     - ✓

   * - ``using()``
     - ✓
     - ✓

   * - ``select_for_update()``
     - ✓
     - ✓

   * - ``select_related()``
     - ✓
     - ✓

   * - ``values()``
     - ✓
     - ✓

   * - ``values_list()``
     - ✓
     - ✓

   * - ``XOR`` operator (``^``)
     - ✓
     - ✓

Database Function Support
~~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - {+framework+} Function
     - Public Preview Support
     - General Availability Support

   * - ``Chr``
     - *Unsupported*.
     - *Unsupported*.

   * - ``ExtractQuarter``
     - *Unsupported*.
     - *Unsupported*.

   * - ``MD5``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Now``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Ord``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Pad``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Repeat``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Reverse``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Right``
     - *Unsupported*.
     - *Unsupported*.

   * - ``SHA1``, ``SHA224``, ``SHA256``, ``SHA384``, ``SHA512``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Sign``
     - *Unsupported*.
     - *Unsupported*.

   * - ``Trunc``
     - *Partially Supported*. The ``tzinfo`` parameter doesn't work
       properly because MongoDB converts the result back to UTC.
     - *Full Support Not Planned*.

Management Support
~~~~~~~~~~~~~~~~~~

{+django-odm+} supports the {+framework+} Admin interface, which
you can use as a management tool. To learn more, see the :ref:`django-get-started-create-admin`
step in the Get Started guide.

The following table describes {+django-odm+}'s support for 
{+framework+} management commands:

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - {+framework+} Admin Command
     - Public Preview Support
     - General Availability Support

   * - ``check``
     - ✓
     - ✓

   * - ``compilemessages``
     - ✓
     - ✓

   * - ``createcachetable``
     - *Unsupported*.
     - *Unsupported*.

   * - ``dbshell``
     - ✓
     - ✓

   * - ``diffsettings``
     - ✓
     - ✓

   * - ``dumpdata``
     - *Unsupported*.
     - ✓

   * - ``flush``
     - ✓
     - ✓

   * - ``inspectdb``
     - *Unsupported*.
     - *Unsupported*. However, we plan to support this command
       in a post-GA release.

   * - ``loaddata``
     - *Unsupported*.
     - ✓

   * - ``makemessages``
     - ✓
     - ✓

   * - ``makemigrations``
     - ✓
     - ✓

   * - ``migrate``
     - ✓
     - ✓

   * - ``optimizemigration``
     - ✓
     - ✓

   * - ``runserver``
     - ✓
     - ✓

   * - ``sendtestemail``
     - ✓
     - ✓

   * - ``shell``
     - ✓
     - ✓

   * - ``showmigrations``
     - ✓
     - ✓

   * - ``sqlflush``
     - *Unsupported*.
     - *Unsupported*.

   * - ``sqlmigrate``
     - ✓
     - ✓

   * - ``sqlsequencereset``
     - *Unsupported*.
     - *Unsupported*.

   * - ``squashmigrations``
     - ✓
     - ✓

   * - ``startapp``
     - ✓
     - ✓

   * - ``startproject``
     - ✓
     - ✓

   * - ``test``
     - ✓
     - ✓

   * - ``testserver``
     - ✓
     - ✓

Migration Support
~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - {+framework+} Feature
     - Public Preview Support
     - General Availability Support

   * - Creating, deleting, and updating indexes through migration
       commands
     - *Partially Supported*. You cannot update indexes on embedded model
       or array fields.
     - *Full Support Not Planned*.

   * - `DDL Transactions <{+django-docs+}/topics/migrations/#transactions>`__
     - *Unsupported*.
     - *Unsupported*.

   * - Making migrations
     - ✓
     - ✓

   * - ``migrate --fake-initial`` option
     - *Unsupported*.
     - *Unsupported*.

   * - Recording schema history
     - ✓
     - ✓

   * - Storing migration files
     - ✓
     - ✓

Third Party Library Support
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 30 30 40

   * - Library
     - Public Preview Support
     - General Availability Support

   * - `Django-filter <https://django-filter.readthedocs.io/en/stable/>`__
     - *Unsupported*.
     - ✓

   * - `Django Rest Framework <https://www.django-rest-framework.org/>`__
     - *Unsupported*.
     - ✓

   * - `Django-allauth <https://docs.allauth.org/en/latest/>`__
     - *Unsupported*.
     - ✓

   * - `Wagtail <https://wagtail.org/>`__
     - *Unsupported*.
     - ✓

   * - `Django Debug Toolbar <https://django-debug-toolbar.readthedocs.io/en/latest/>`__
     - *Unsupported*.
     - ✓
